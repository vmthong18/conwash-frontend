# đẩy git trên macbook
git status
git add .
git commit -m "Mô tả ngắn gọn nội dung thay đổi"
git push -u origin main

# pull git trên window
git pull origin main

#SQL
CREATE TABLE GoiHang (
    ID INT AUTO_INCREMENT PRIMARY KEY,   -- Cột ID làm khóa chính và tự động tăng
    TenGoi VARCHAR(255) NOT NULL,        -- Cột tên gói, kiểu chuỗi với độ dài tối đa 255 ký tự
    GiaTien DECIMAL(10, 2) NOT NULL      -- Cột giá tiền, kiểu số với 2 chữ số thập phân
);





// src/app/dashboard/donhang/page.tsx
import { useState } from "react";
import Link from "next/link";
import { cookies } from "next/headers";

// Utility to handle query params
type Search = { [k: string]: string | string[] | undefined };

export default async function DonHangPage({ searchParams }: { searchParams: Search }) {
  const jar = await cookies();
  const access = jar.get(process.env.COOKIE_ACCESS || "be_giay_access")?.value;
  if (!access) return <div className="p-8">Chưa đăng nhập.</div>;

  const limit = Number(searchParams.limit ?? 10);
  const page = Math.max(1, Number(searchParams.page ?? 1));
  const offset = (page - 1) * limit;
  const q = (searchParams.q as string) || ""; // Từ khóa: tên hoặc SĐT
  const sort = (searchParams.sort as string) || "-ID"; // Mặc định ID giảm dần

  const url = new URL(`${process.env.DIRECTUS_URL}/items/DonHang`);
  const ASSETS = process.env.NEXT_PUBLIC_DIRECTUS_ASSETS ?? process.env.DIRECTUS_URL ?? "";

  const assetUrl = (id: string, size = 96) =>
    `${ASSETS}/assets/${id}?width=${size}&height=${size}&fit=cover`;

  // Lọc trạng thái
  const handleTrangThaiFilter = (value: string) => {
    url.searchParams.set("filter[TrangThai][_eq]", value);
  };

  // Lọc đơn hàng theo các trạng thái
  const [selectedItems, setSelectedItems] = useState<number[]>([]);

  // Hàm chọn hoặc bỏ chọn tất cả các đơn hàng
  const toggleAll = (checked: boolean) => {
    setSelectedItems(checked ? rows.map((r) => r.ID) : []);
  };

  // Hàm chọn/deselect 1 đơn hàng
  const handleSelect = (id: number) => {
    setSelectedItems((prev) =>
      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]
    );
  };

  // Fetch danh sách đơn hàng
  const res = await fetch(url.toString(), {
    headers: { Authorization: `Bearer ${access}` },
    cache: "no-store",
  });

  if (!res.ok) {
    const text = await res.text().catch(() => "");
    return (
      <main className="p-8">
        <h1 className="text-2xl font-bold">Đơn hàng</h1>
        <p className="text-red-600 mt-4">Lỗi tải dữ liệu: {res.status} {text}</p>
      </main>
    );
  }

  const json = await res.json();
  const rows: any[] = json?.data ?? [];
  const hasPrev = page > 1;
  const hasNext = rows.length === limit;

  const paramsFor = (p: number) => {
    const sp = new URLSearchParams();
    sp.set("page", String(p));
    sp.set("limit", String(limit));
    sp.set("sort", sort);
    if (q) sp.set("q", q);
    return `?${sp.toString()}`;
  };

  // Cập nhật trạng thái của các đơn hàng đã chọn
  const handleUpdateStatus = async (newStatus: string) => {
    if (!selectedItems.length) return alert("Chưa chọn đơn hàng");

    const res = await fetch("/api/v1/donhang", {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ donhangIds: selectedItems, trangThai: newStatus }),
    });

    const data = await res.json();
    if (data.ok) {
      alert("Cập nhật trạng thái thành công!");
      // Refresh hoặc re-fetch lại danh sách đơn hàng
    } else {
      alert("Lỗi cập nhật trạng thái");
    }
  };

  return (
    <main className="p-8">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Đơn hàng</h1>
        <div className="flex items-center gap-3">
          <Link href="/dashboard" className="text-blue-600 hover:underline">← Về Dashboard</Link>
        </div>
      </div>

      {/* Thanh tìm kiếm */}
      <form method="get" className="mt-4 flex gap-2">
        <input
          name="q"
          defaultValue={q}
          placeholder="Nhập tên KH hoặc SĐT…"
          className="border rounded px-3 py-2 w-72"
        />
        <input type="hidden" name="limit" value={limit} />
        <input type="hidden" name="sort" value={sort} />
        <button className="px-4 py-2 bg-gray-800 text-white rounded">Tìm</button>
      </form>

      {/* Lọc trạng thái */}
      <div className="mt-4">
        <select
          className="border rounded px-3 py-2 w-72"
          onChange={(e) => handleTrangThaiFilter(e.target.value)}
        >
          <option value="ALL">Tất cả trạng thái</option>
          <option value="TAO_MOI">Tạo mới</option>
          <option value="CHO_LAY">Chờ lấy hàng</option>
          <option value="DANG_GIAT">Đang giặt</option>
          <option value="HOAN_THANH">Hoàn thành</option>
        </select>
      </div>

      {/* Bảng đơn hàng */}
      <div className="mt-6 overflow-x-auto">
        <table className="min-w-full border border-gray-300 bg-white">
          <thead className="bg-gray-100">
            <tr>
              <th className="p-2 border-b">
                <input
                  type="checkbox"
                  onChange={(e) => toggleAll(e.target.checked)}
                  checked={selectedItems.length === rows.length}
                />
              </th>
              <Th label="ID" sort="ID" current={sort} />
              <th className="text-left p-2 border-b">Tên khách hàng</th>
              <th className="text-left p-2 border-b">Số điện thoại</th>
              <th className="text-left p-2 border-b">Trạng thái</th>
              <th className="text-left p-2 border-b">QR</th>
              <th className="text-left p-2 border-b">Người nhập</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((r) => (
              <tr key={r.ID} className="border-b">
                <td className="p-2">
                  <input
                    type="checkbox"
                    checked={selectedItems.includes(r.ID)}
                    onChange={() => handleSelect(r.ID)}
                  />
                </td>
                <td className="p-2">{r.ID}</td>
                <td className="p-2">{r?.ID_KhachHang?.TenKhachHang ?? "-"}</td>
                <td className="p-2">{r?.ID_KhachHang?.DienThoai ?? "-"}</td>
                <td className="p-2">{r.TrangThai}</td>
                <td className="p-2">
                  {r?.AnhFile?.id ? (
                    <a
                      href={`${ASSETS}/assets/${r.AnhFile.id}`}
                      target="_blank"
                      rel="noreferrer"
                      title="Mở QR gốc"
                    >
                      <img
                        src={assetUrl(r.AnhFile.id, 64)}
                        alt="QR"
                        className="h-12 w-12 rounded border bg-white p-1 object-contain"
                      />
                    </a>
                  ) : (
                    "-"
                  )}
                </td>
                <td className="p-2">
                  {r?.NguoiNhap ? (r.NguoiNhap.first_name || r.NguoiNhap.email || r.NguoiNhap.id) : "-"}
                </td>
              </tr>
            ))}
            {rows.length === 0 && (
              <tr><td colSpan={6} className="p-4 text-center text-gray-500">Không có dữ liệu</td></tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Nút submit cập nhật trạng thái */}
      <div className="mt-6 flex gap-2">
        <button
          onClick={() => handleUpdateStatus("CHO_LAY")}
          className="px-4 py-2 bg-blue-600 text-white rounded"
        >
          Cập nhật trạng thái "Chờ lấy"
        </button>
        <button
          onClick={() => handleUpdateStatus("DANG_GIAT")}
          className="px-4 py-2 bg-green-600 text-white rounded"
        >
          Cập nhật trạng thái "Đang giặt"
        </button>
      </div>

      {/* Phân trang */}
      <div className="mt-4 flex items-center gap-3">
        <span>Trang {page}</span>
        <div className="flex gap-2">
          {hasPrev ? (
            <Link href={paramsFor(page - 1)} className="px-3 py-1 border rounded">← Trước</Link>
          ) : <span className="px-3 py-1 border rounded opacity-50">← Trước</span>}
          {hasNext ? (
            <Link href={paramsFor(page + 1)} className="px-3 py-1 border rounded">Sau →</Link>
          ) : <span className="px-3 py-1 border rounded opacity-50">Sau →</span>}
        </div>
      </div>
    </main>
  );
}

function Th({ label, sort, current }: { label: string; sort: string; current: string }) {
  const dir = current === sort ? "-" + sort : sort; // toggle
  const sp = new URLSearchParams();
  sp.set("page", "1");
  sp.set("limit", "10");
  sp.set("sort", dir);
  return (
    <th className="text-left p-2 border-b">
      <a href={`?${sp.toString()}`} className="hover:underline">{label}</a>
      {current === sort ? " ▲" : (current === "-" + sort ? " ▼" : "")}
    </th>
  );
}










// src/app/dashboard/donhang/listdonhang.tsx
"use client";
import { useState, useEffect } from 'react';

import Link from 'next/link';

type DonHang = {
    ID: number;
    ID_KhachHang?: {
        TenKhachHang?: string;
        DienThoai?: string;
    };
    TrangThai?: string;
    AnhFile?: {
        id: string;
    };
    // Add other fields as needed
};

export default function ListDonHang({
orders,
    token,

}: {
 orders: DonHang[];
    token: string;

}) {
    const [donHangList, setDonHangList] = useState(orders);
    const [selectedItems, setSelectedItems] = useState<number[]>([]);
    const [statusFilter, setStatusFilter] = useState('ALL');
    const [page, setPage] = useState(1);
    const [limit] = useState(10);
    const [loading, setLoading] = useState(false);




    const fetchDonHang = async () => {
        setLoading(true);
        const url = new URL(`${process.env.DIRECTUS_URL}/items/donhang`);
        //if (statusFilter !== 'ALL') {
        //    url.searchParams.set('filter[TrangThai][_eq]', statusFilter);
        //}
        url.searchParams.set('page', String(page));
        url.searchParams.set('limit', String(limit));

        const res = await fetch(url.toString(), {
            headers: { Authorization: `Bearer ${token}` },
            cache: 'no-store',
        });
        
        if (res.ok) {
            const json = await res.json();

            setDonHangList(json?.data ?? []);
        } else {
            alert('Lỗi tải dữ liệu');
        }
        setLoading(false);
    };

    const handleSelectAll = (checked: boolean) => {
        setSelectedItems(checked ? donHangList.map((item) => item.ID) : []);
    };

    const handleSelect = (id: number) => {
        setSelectedItems((prev) =>
            prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]
        );
    };

    const handleUpdateStatus = async (newStatus: string) => {
        if (selectedItems.length === 0) {
            return alert('Chưa chọn đơn hàng!');
        }

        const res = await fetch('/api/v1/donhang', {
            method: 'PATCH',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                donhangIds: selectedItems,
                trangThai: newStatus,
            }),
        });

        const data = await res.json();
        if (data.ok) {
            alert('Cập nhật trạng thái thành công!');
            fetchDonHang(); // Refresh data
        } else {
            alert('Lỗi cập nhật trạng thái');
        }
    };

    return (
        <div>
            <div className="flex items-center mb-4">
                <button
                    onClick={() => handleUpdateStatus('CHO_LAY')}
                    className="bg-blue-600 text-white px-4 py-2 rounded"
                >
                    Cập nhật trạng thái "Chờ lấybbbb"
                </button>
                <button
                    onClick={() => handleUpdateStatus('DANG_GIAT')}
                    className="bg-green-600 text-white px-4 py-2 rounded ml-2"
                >
                    Cập nhật trạng thái "Đang giặt"
                </button>
                <div className="ml-auto">
                    <select
                        onChange={(e) => setStatusFilter(e.target.value)}
                        className="border rounded px-3 py-2"
                    >
                        <option value="ALL">Tất cả trạng thái</option>
                        <option value="TAO_MOI">Tạo mới</option>
                        <option value="CHO_LAY">Chờ lấy</option>
                        <option value="DANG_GIAT">Đang giặt</option>
                        <option value="HOAN_THANH">Hoàn thành</option>
                    </select>
                </div>
            </div>

            <table className="min-w-full table-auto">
                <thead>
                    <tr>
                        <th>
                            <input
                                type="checkbox"
                                checked={selectedItems.length === donHangList.length}
                                onChange={(e) => handleSelectAll(e.target.checked)}
                            />
                        </th>
                        <th>ID</th>
                        <th>Tên khách hàng</th>
                        <th>Số điện thoại</th>
                        <th>Trạng thái</th>
                        <th>Ảnh khi nhận</th>
                    </tr>
                </thead>
                <tbody>
                    {loading ? (
                        <tr>
                            <td colSpan={6}>Loading...</td>
                        </tr>
                    ) : (
                        donHangList.map((donhang) => (
                            <tr key={donhang.ID}>
                                <td>
                                    <input
                                        type="checkbox"
                                        checked={selectedItems.includes(donhang.ID)}
                                        onChange={() => handleSelect(donhang.ID)}
                                    />
                                </td>
                                <td>{donhang.ID}</td>
                                <td>{donhang?.ID_KhachHang?.TenKhachHang}</td>
                                <td>{donhang?.ID_KhachHang?.DienThoai}</td>
                                <td>{donhang.TrangThai}</td>
                                <td>
                                    {donhang?.AnhFile ? (
                                        <img
                                            src={`${process.env.DIRECTUS_URL}/assets/${donhang.AnhFile.id}`}
                                            alt="Ảnh khi nhận"
                                            className="h-12 w-12 rounded"
                                        />
                                    ) : (
                                        'Không có ảnh'
                                    )}
                                </td>
                            </tr>
                        ))
                    )}
                </tbody>
            </table>

            <div className="mt-4">
                <button
                    onClick={() => setPage(page - 1)}
                    disabled={page === 1}
                    className="px-4 py-2 bg-gray-600 text-white rounded"
                >
                    Trước
                </button>
                <span className="mx-2">Trang {page}</span>
                <button
                    onClick={() => setPage(page + 1)}
                    disabled={!loading}
                    className="px-4 py-2 bg-gray-600 text-white rounded"
                >
                    Sau
                </button>
            </div>
        </div>
    );
}
